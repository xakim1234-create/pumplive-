// index.js ‚Äî v5.0 (queue-based) + Telegram photo + Axiom /t/{mint}
import WebSocket from "ws";
import fetch from "node-fetch";

const WS_URL = "wss://pumpportal.fun/api/data";
const API = "https://frontend-api-v3.pump.fun";

// === Telegram (–∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
const TG_TOKEN = "7598357622:AAHeGIaZJYzkfw58gpR1aHC4r4q315WoNKc";
const TG_CHAT_ID = "-4857972467";

// === –¢—é–Ω–∏–Ω–≥ –ø–æ–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ===
const MIN_GAP_MS = 1500;           // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç–µ—Ä RPS (~0.66 rps)
const MAX_LIFETIME_MS = 120_000;   // –∂–¥—ë–º LIVE –¥–æ 2 –º–∏–Ω—É—Ç
const RECHECK_DELAY_MS = 4000;     // –µ—Å–ª–∏ –µ—â—ë –Ω–µ LIVE ‚Äî –≤–µ—Ä–Ω—ë–º –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ 4—Å
const MAX_QUEUE = 1000;            // –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö mint
const MAX_RETRIES = 2;

let ws;
let lastWsMsgAt = 0;
let lastLiveAt = 0;

// ‚Äî‚Äî‚Äî –º–µ—Ç—Ä–∏–∫–∏
const metrics = {
  requests: 0, ok: 0, retries: 0,
  http429: 0, httpOther: 0,
  emptyBody: 0, skippedNull: 0,
  reconnects: 0,
};

// ‚Äî‚Äî‚Äî –ª–æ–≥ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–æ—Ç—Ç–ª–µ—Ä
function log(...a) { console.log(new Date().toISOString(), ...a); }
let nextAvailableAt = 0;
async function throttle() {
  const now = Date.now();
  if (now < nextAvailableAt) {
    await new Promise(r => setTimeout(r, nextAvailableAt - now));
  }
  nextAvailableAt = Date.now() + MIN_GAP_MS;
}

// ‚Äî‚Äî‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π GET JSON
async function safeGetJson(url) {
  metrics.requests++;
  for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
    try {
      await throttle();
      const r = await fetch(url, {
        headers: {
          accept: "application/json, text/plain, */*",
          "cache-control": "no-cache",
          "user-agent": "pumplive-watcher/5.0"
        }
      });

      if (r.status === 429) {
        metrics.http429++;
        // –ú—è–≥–∫–∏–π backoff –ø—Ä–∏ 429
        const waitMs = 2000 + Math.random() * 2000;
        nextAvailableAt = Date.now() + waitMs;
        await new Promise(res => setTimeout(res, waitMs));
        continue;
      }

      if (!r.ok) {
        metrics.httpOther++;
        throw new Error(`HTTP ${r.status}`);
      }

      const text = await r.text();
      if (!text || text.trim() === "") {
        metrics.emptyBody++;
        throw new Error("Empty body");
      }

      metrics.ok++;
      return JSON.parse(text);
    } catch (e) {
      if (attempt < MAX_RETRIES) {
        metrics.retries++;
        await new Promise(res => setTimeout(res, 400 * (attempt + 1)));
        continue;
      }
      metrics.skippedNull++;
      return null;
    }
  }
}

// ‚Äî‚Äî‚Äî —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
function formatNumber(n) {
  return n.toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}
function extractOfficialSocials(coin) {
  const socials = [];
  if (coin?.website) socials.push(`üåê <b>Website:</b> ${coin.website}`);
  if (coin?.twitter) socials.push(`üê¶ <b>Twitter:</b> ${coin.twitter}`);
  if (coin?.telegram) socials.push(`üí¨ <b>Telegram:</b> ${coin.telegram}`);
  if (coin?.discord) socials.push(`üéÆ <b>Discord:</b> ${coin.discord}`);
  return socials;
}

// ‚Äî‚Äî‚Äî Telegram
async function sendTG({ text, photo }) {
  if (!TG_TOKEN || !TG_CHAT_ID) return;
  try {
    if (photo) {
      await fetch(`https://api.telegram.org/bot${TG_TOKEN}/sendPhoto`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({
          chat_id: TG_CHAT_ID,
          photo,
          caption: text,
          parse_mode: "HTML"
        })
      });
    } else {
      await fetch(`https://api.telegram.org/bot${TG_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({
          chat_id: TG_CHAT_ID,
          text,
          parse_mode: "HTML"
        })
      });
    }
  } catch (e) {
    log("‚ö†Ô∏è  telegram send error:", e.message);
  }
}

// =====================
//       –û–ß–ï–†–ï–î–¨
// =====================
const inQueue = new Set(); // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ mint
const queue = [];          // [{ mint, name, symbol, enqueuedAt, expiresAt }]
function enqueue(mint, name = "", symbol = "") {
  if (inQueue.has(mint)) return;
  if (inQueue.size >= MAX_QUEUE) return;
  const now = Date.now();
  queue.push({
    mint,
    name,
    symbol,
    enqueuedAt: now,
    expiresAt: now + MAX_LIFETIME_MS,
    nextTryAt: now
  });
  inQueue.add(mint);
}

function requeue(item) {
  // –û–±–Ω–æ–≤–∏–º nextTryAt –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  item.nextTryAt = Date.now() + RECHECK_DELAY_MS;
  queue.push(item);
}

function queueSize() {
  return inQueue.size;
}

// –û–¥–∏–Ω –≤–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏ —É–≤–∞–∂–∞–µ—Ç MIN_GAP_MS
async function workerLoop() {
  while (true) {
    // –í–æ–∑—å–º—ë–º —Å–ª–µ–¥—É—é—â—É—é –≥–æ—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    let idx = -1;
    const now = Date.now();
    for (let i = 0; i < queue.length; i++) {
      if (queue[i].nextTryAt <= now) { idx = i; break; }
    }

    if (idx === -1) {
      // –ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥—ë–º
      await new Promise(r => setTimeout(r, 250));
      continue;
    }

    const item = queue.splice(idx, 1)[0];
    const { mint, name, symbol, expiresAt } = item;

    if (Date.now() > expiresAt) {
      // –∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî —Å–Ω–∏–º–∞–µ–º —Å —É—á—ë—Ç–∞
      inQueue.delete(mint);
      continue;
    }

    // –î—ë—Ä–≥–∞–µ–º API
    const coin = await safeGetJson(`${API}/coins/${mint}`);
    if (!coin) {
      // –û—à–∏–±–∫–∞/–ø—É—Å—Ç–æ ‚Äî –¥–∞–¥–∏–º –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å –ø–æ–∑–∂–µ
      requeue(item);
      continue;
    }

    // LIVE?
    if (coin.is_currently_live) {
      // –°–æ—Ü—Å–µ—Ç–∏ ‚Äî –ø—Ä–µ–∂–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –µ—Å–ª–∏ –≤—Å–µ null, –Ω–µ —à–ª—ë–º
      const socials = extractOfficialSocials(coin);
      if (socials.length === 0) {
        // –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –Ω–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        inQueue.delete(mint);
        continue;
      }

      // –ì–æ—Ç–æ–≤–∏–º –∏ —à–ª—ë–º
      lastLiveAt = Date.now();

      // –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
      log(`üé• LIVE START | ${coin.name || name} (${coin.symbol || symbol})`);
      log(`   mint: ${mint}`);
      if (typeof coin.usd_market_cap === "number")
        log(`   mcap_usd: ${coin.usd_market_cap.toFixed(2)}`);
      log(`   socials: ${socials.join("  ")}`);

      // –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ì
      const title = `${coin.name || name} (${coin.symbol || symbol})`;
      const mcapStr = typeof coin.usd_market_cap === "number"
        ? `$${formatNumber(coin.usd_market_cap)}`
        : "n/a";

      const msg = [
        `üé• <b>LIVE START</b> | ${title}`,
        ``,
        `Mint: <code>${mint}</code>`,
        `üîó <b>Axiom:</b> https://axiom.trade/t/${mint}`,
        `üí∞ Market Cap: ${mcapStr}`,
        ``,
        socials.join("\n")
      ].join("\n");

      const photoUrl = coin?.image_uri || null;

      log("üì§ sending to Telegram‚Ä¶");
      sendTG({ text: msg, photo: photoUrl })
        .then(() => log("‚úÖ sent to Telegram"))
        .catch(e => log("‚ö†Ô∏è TG error:", e.message));

      // –°–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É —Å –æ—á–µ—Ä–µ–¥–∏
      inQueue.delete(mint);
      continue;
    }

    // –ï—â—ë –Ω–µ LIVE ‚Äî –≤–µ—Ä–Ω—ë–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    requeue(item);
  }
}

// =====================
//      WebSocket
// =====================
function connect() {
  ws = new WebSocket(WS_URL);

  ws.on("open", () => {
    log("‚úÖ WS connected, subscribing to new tokens‚Ä¶");
    ws.send(JSON.stringify({ method: "subscribeNewToken" }));
  });

  ws.on("message", (raw) => {
    lastWsMsgAt = Date.now();
    let msg;
    try { msg = JSON.parse(raw.toString()); } catch { return; }
    const mint = msg?.mint || msg?.tokenMint || msg?.ca || null;
    if (!mint) return;

    // –ò–º—è/—Ç–∏–∫–µ—Ä –∏–∑ WS –µ—Å–ª–∏ –µ—Å—Ç—å
    const nm = msg?.name || msg?.tokenName || "";
    const sm = msg?.symbol || msg?.ticker || "";

    enqueue(mint, nm, sm);
  });

  ws.on("close", () => {
    metrics.reconnects++;
    log(`üîå WS closed ‚Üí Reconnecting in 5s‚Ä¶`);
    setTimeout(connect, 5000);
  });

  ws.on("error", (e) => log("‚ùå WS error:", e.message));
}

// =====================
//      Heartbeat
// =====================
setInterval(() => {
  const now = Date.now();
  const secSinceWs = lastWsMsgAt ? Math.round((now - lastWsMsgAt) / 1000) : -1;
  const minSinceLive = lastLiveAt ? Math.round((now - lastLiveAt) / 60000) : -1;
  console.log(
    `[stats] watchers=${queueSize()}  ws_last=${secSinceWs}s  live_last=${minSinceLive}m  ` +
    `req=${metrics.requests} ok=${metrics.ok} retries=${metrics.retries} ` +
    `429=${metrics.http429} other=${metrics.httpOther} empty=${metrics.emptyBody} ` +
    `null=${metrics.skippedNull} reconnects=${metrics.reconnects}`
  );

  // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ WS –º–æ–ª—á–∏—Ç > 300—Å ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
  if (secSinceWs >= 0 && secSinceWs > 300) {
    console.log(`[guard] no WS messages for ${secSinceWs}s ‚Üí force reconnect`);
    try { ws?.terminate(); } catch {}
  }
}, 60_000);

// =====================
//       Start!
 // =====================
log("Worker starting‚Ä¶");
connect();
workerLoop(); // –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
