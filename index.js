// ==== –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã—Å—Ç—Ä–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ====
const DEBOUNCE_MS_MIN = 900;     // –ø–µ—Ä–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ WS
const DEBOUNCE_MS_MAX = 1200;
const QUICK_RECHECKS = 6;        // —Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
const QUICK_STEP_MS   = 500;     // —à–∞–≥ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏

// –∫—ç—à, —á—Ç–æ–±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
const pending = new Set();

// –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ñ–µ—Ç—á —Å no-cache –∏ —Ä–µ—Ç—Ä–∞—è–º–∏ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
async function fetchCoinSafe(mint, retries = 2) {
  const url = `${API}/coins/${mint}?_=${Date.now()}`;
  for (let i = 0; i <= retries; i++) {
    try {
      const r = await fetch(url, {
        headers: {
          "accept": "application/json, text/plain, */*",
          "cache-control": "no-cache, no-store",
          "pragma": "no-cache",
          "user-agent": "live-sniffer/mini"
        }
      });
      const text = await r.text();
      if (!text || !text.trim()) throw new Error("empty-body");
      return JSON.parse(text);
    } catch (e) {
      if (i < retries) {
        await new Promise(res => setTimeout(res, 350 + i * 200));
        continue;
      }
      throw e;
    }
  }
}

// –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–≤–∞ (–¥–µ–±–∞—É–Ω—Å + –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±)
async function confirmLive(mint, tokenFrom = "ws") {
  if (pending.has(mint)) return;
  pending.add(mint);

  const sleep = (ms) => new Promise(r => setTimeout(r, ms));
  const debounce = Math.floor(DEBOUNCE_MS_MIN + Math.random() * (DEBOUNCE_MS_MAX - DEBOUNCE_MS_MIN));
  await sleep(debounce);

  let lastErr = null;
  for (let i = 0; i <= QUICK_RECHECKS; i++) {
    try {
      const c = await fetchCoinSafe(mint, 2);
      const live = c?.is_currently_live === true;
      const viewers = (typeof c?.num_participants === "number") ? c.num_participants : "n/a";

      if (live) {
        console.log(new Date().toISOString(),
          `üî• LIVE | ${mint} | ${(c?.symbol || "").toString()} (${(c?.name || "").toString()}) | viewers=${viewers} | is_currently_live=true`
        );
        pending.delete(mint);
        return;
      }

      // –Ω–µ –ª–∞–π–≤ ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥—ë–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
      if (i < QUICK_RECHECKS) {
        await sleep(QUICK_STEP_MS);
        continue;
      }

      // –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –≤—Å—ë –µ—â—ë false ‚Äî –ª–æ–≥–∏—Ä—É–µ–º not live
      console.log(new Date().toISOString(),
        `‚Ä¶ not live | ${mint} | viewers=${viewers} | is_currently_live=false`
      );
      pending.delete(mint);
      return;

    } catch (e) {
      lastErr = e;
      // —Å–µ—Ç—å/–ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ ‚Äî –µ—â—ë –ø–æ–ø—ã—Ç–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (i < QUICK_RECHECKS) {
        await sleep(QUICK_STEP_MS);
        continue;
      }
      console.log(`‚ùå fetch error: ${e.message} | mint: ${mint}`);
      pending.delete(mint);
      return;
    }
  }

  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  if (pending.has(mint)) pending.delete(mint);
}

// === –≤ —Ç–≤–æ—ë–º ws.on("message") –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–π confirmLive ===
// ...
ws.on("message", (raw) => {
  try {
    const msg = JSON.parse(raw.toString());
    const mint = msg?.mint || msg?.tokenMint || msg?.ca || null;
    if (!mint) return;
    confirmLive(mint, "ws");
  } catch {}
});
